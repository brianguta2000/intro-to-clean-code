1. In your own words, explain what clean code is and why it is important.

> clean code is keeping code split up into individual functions allowing for easier readability and for easier maintenance.

2. Read this article about Toyota and their use of bad code. 
Although you may not yet understand all of the topics discussed, 
think about another commonly used object that relies on computers and explain what would happen if the code 
was not created to an acceptable standard.

> For some reason, something as simple today as a microwave came to mind. While, it may not have deadly consequences such as 
Toyota had something such a s microwave with bad code in it could pose a lot of issues if not programmed correctly, 
resulting in maybe a fire or just poor perfomance in general.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function

 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

>Not clean, code could be split up more to be more concise. The function itself should have a more descriptitve name too.

FUNCTION tempConvCelc(y)             

IF y = "F" THEN               
 SET z to (x-32) * (5/9)     
 PRINT z                       
 
function tempConvFahr(x)
ELSE IF y = "C" THEN         
 SET z to x * 1.8000 + 32.00   
 PRINT z                    
 END IF
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

> To me the code appears to be cleanly written, easy to understand whats going on upon first glance.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION customerPays(subTotal, discountRate, paymentType) //made function name a verb. "Checkout" is not a verb
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

ANSWER A: 

FUNCTION customerPays(subTotal, discountRate, paymentType) //made function name a verb. "Checkout" is not a verb
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

> b. The following function checks out a book if there are no issues with the guest's account.


FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

ANSWER B:


FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.oustandingFees = 0  THEN
         APPEND book to guest.books
         SET book.status to "Checked Out"
         PRINT "Your books have been issued."
     END IF
 ELSE IF guest.hasOverdueBooks = true THEN
     PRINT "Unable to check out book. You currently have books past due."
END IF
ELSE IF NOT(guest.accountActive) THEN
     PRINT "Your account is inactive. Please reactivate your account to checkout book"
END IF
ELSE IF guest.outstandingFees > 0 THEN
     PRINT "You currently owe" + guest.outstandingFees 
 END IF
ELSE PRINT "There is a problem, please see a librarian for further assistance". 
END IF
END FUNCTION


> c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION



END


ANSWER C: 

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

END CLASS

CLASS offer

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

END CLASS

END

6.
function Square (intArray) {
  var sum = intArray.reduce(function(previousVal, currentVal) {
    return previousVal + currentVal;
  }, 0);
  var sqrt = Math.sqrt(sum);
  if (Number.isInteger(sqrt)) {
    return sqrt;
  }
  return sum;
}

7.
function isDuplicate (intArray) {
  var thisArray = intArray;
  var thisInt = thisArray.pop();
  while (thisInt) {
    if (thisInt in thisArray) {
      return true;
    }
    thisInt = thisArray.pop();
  }
  return false;
}