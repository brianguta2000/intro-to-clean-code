1. What is a hash table?
>It is a data structure organizing values in key-value pairs inside an array. Each value is associated with a unique key within that array so that every value can be located by calling its uniquely paired key.

2. What is hashing?
> It is the process by which a specific key in a key-value pair, often in string format, is converted into a unique hash code. That hash code is then converted into an index in an array by modding it with its capacity - k. This allows each key-value pair to be uniquely stored in a Hash Table.

3. How does a hash table store data?
> The hashing function converts the key into a hash code then mods it into a unique array index. If two key-value pairs result in the same index, it results in collision, which is handled internally by the programming languages Ruby and JS.

4. How are hash tables and objects different?
> Objects keys are usually symbols and numbers, whereas keys in a Hash Table can be any form of data. Also Objects are generally used to store a static number of key-value pairs of all different types, whereas Hash Tables store a dynamic number of pairs that are formatted to match each other.

5. Determine whether to use a hash table of object:

  * List of pets and unique names: Hash Table
  * Name, age and birthday of best friend: Object
  * Name, age, and location of every company in a given city: Hash Table
  * All of the books checked out from a library by a particular individual: Hash Table
  * The primary and secondary phone numbers for a contact: Object

6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let HashTable = function() {

  let storage = [];
  const storageLimit = 100;

  this.add = function(key,value) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key,value]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          storage[index][i][1] = value;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([key,value]);
      }
    }
  };

  this.lookup = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };

};

var ht = new HashTable();
ht.add(99999,{name:'Ronald', address:' 1000 Greenland St.'})
ht.add(1000,{name:'John',address:'200 Toronto Ave.'});
ht.add(5000,{name:'Mike',address:'354 Gerard St.'});

console.log(ht.lookup(99999));
console.log(ht.lookup(5000));
console.log(ht.lookup(1000));



7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.

var hash = (string,max) =>{
  var hash= 0
  for(var i=0; i<string.length;i++){
    hash += string.charCodeAt(i)
  }
  return hash % max;
};

let HashTable = function(){
 let storage = [];
 const storageLimit= 5;


 this.add = function(key, value) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key, value]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          storage[index][i][1] = value;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([key, value]);
      }
    }
  };
  
  this.search = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };

};

var ht = new HashTable();
ht.add('Fiction books',1000);
ht.add('Horror books',500);
ht.add('Comic books', 300);
ht.add('Romance',210);

ht.search('Romance')


8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

//Hash Function
let hash = (string, max)=> {
  var hash = 0;
  for(var i=0; i< string.length;i++){
    hash+= string.charCodeAt(i);
  }
  return hash % max;
}

class Newspaper {
  constructor() {
    this.storage = [];
    this.storageLimit = 60;
  }

  add(publisher, pubDate) {
    let key = publisher + pubDate;
    let index = hash(key, this.storageLimit);
    let data = [publisher, pubDate];
      if (this.storage[index] === undefined) {
        this.storage[index] = [ ];
    } 
    this.storage[index].push(data);
    }

  search(publisher, pubDate) {
    let key = publisher + pubDate;
    let index = hash(key, this.storageLimit);
    let result = [];
    
    if (!this.storage[index]) { return 'No results were found for this search' }
      this.storage[index].forEach(entry => {
       if (entry[0] === publisher && entry[1] === pubDate) { 
        result.push(entry); 
      }
    })
    return result;
  }
}


let news = new Newspaper();
news.add('Pragmatic Bookshelf', '2009');
news.add('St.Martins', '1990');
news.add('St.Martin','2008');
news.add('Pragmatic Publications', '2006');
news.add('Oxford', '2018');

console.log(news.search('Pragmatic Bookshelf', '2009'));
console.log(news.search('St.Martins', '1990'));
console.log(news.search('Pragmatic Bookshelf', '2009'));
console.log(news.search('Pragmatic Publications', '2006'));
console.log(news.search('humma'))

