1. What is a hash table?
>It is a data structure organizing values in key-value pairs inside an array. Each value is associated with a unique key within that array so that every value can be located by calling its uniquely paired key.

2. What is hashing?
> It is the process by which a specific key in a key-value pair, often in string format, is converted into a unique hash code. That hash code is then converted into an index in an array by modding it with its capacity - k. This allows each key-value pair to be uniquely stored in a Hash Table.

3. How does a hash table store data?
> The hashing function converts the key into a hash code then mods it into a unique array index. If two key-value pairs result in the same index, it results in collision, which is handled internally by the programming languages Ruby and JS.

4. How are hash tables and objects different?
> Objects keys are usually symbols and numbers, whereas keys in a Hash Table can be any form of data. Also Objects are generally used to store a static number of key-value pairs of all different types, whereas Hash Tables store a dynamic number of pairs that are formatted to match each other.

5. Determine whether to use a hash table of object:,

  * List of pets and unique names: Hash Table
  * Name, age and birthday of best friend: Object
  * Name, age, and location of every company in a given city: Hash Table
  * All of the books checked out from a library by a particular individual: Hash Table
  * The primary and secondary phone numbers for a contact: Object

6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.


Answer>

class HashTable {
  constructor(items){
    this.hashTableSize = 100;
    this.storage = [];
  };

  hash(key){
    let hash = 0;
    for(let i = 0; i < key.length; i++){
      hash += key.charCodeAt(i);
    }
    return hash % this.hashTableSize;
  };

  add(key, value){
    let index = this.hash(key);
    if(this.storage[index] === undefined){
      this.storage[index] = [[key, value]];
    } else {
      let duplicate = false;
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          console.log("This phone number is already in the system");
          duplicate = true;
        }
      }
      if(duplicate === false){
        this.storage[index].push([key, value]);
      }
    }
  };

  get(key){
    let index = this.hash(key);
    if(this.storage[index] === undefined){
      return undefined;
    } else {
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          return this.storage[index][i][1];
        }
      }
    }
  };
};

class PhoneBook {
  constructor(entries){
    this.book = new HashTable(entries)
  };

  addContact({phone, name, address}){
    this.book.add(phone, {name, address});
  };

  lookup({phone}){
    return this.book.get(phone);
  }
};

let contacts = new PhoneBook;

contacts.addContact({
  name: 'John Doe',
  address: '1234 Random Ln.',
  phone: '123-456-7890'
});

contacts.addContact({
  name: 'Jane Doe',
  address: '12 Random Rd.',
  phone: '123-456-4321'
})

contacts.addContact({
  name: 'Some Man',
  address: '123 Some Place',
  phone: '123-456-4321'
})

console.log(contacts.lookup({
  phone: '123-456-7890'
  })
);

console.log(contacts.lookup({
  phone: '123-456-4321'
  })
);




7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.


Answer> 

lass HashTable {
  constructor(items){
    this.hashTableSize = 100;
    this.storage = [];
  };

  hash(key){
    let hash = 0;
    for(let i = 0; i < key.length; i++){
      hash += key.charCodeAt(i);
    }
    return hash % this.hashTableSize;
  };

  add(key, value){
    let index = this.hash(key);
    if(this.storage[index] === undefined){
      this.storage[index] = [[key, value]];
    } else {
      let duplicate = false;
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          this.storage[index][i][1] = value;
          duplicate = true;
        }
      }
      if(duplicate === false){
        this.storage[index].push([key, value]);
      }
    }
  };

  getItems(key){
    let index = this.hash(key);
    if(this.storage[index] === undefined){
      return false;
    } else {
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          return this.storage[index][i][1];
        }
      }
    }
  };

  hasItem(key){
    return this.getItems(key) !== false;
  };

  remove(key){
    let index = this.hash(key);
    if(this.storage[index].length === 1 && this.storage[index][0][0] === key){
      delete this.storage[index];
    } else {
      for(let i = 0; i < this.storage[index]; i++){
        if(this.storage[index][i][0] === key){
          delete this.storage[index][i];
        }
      }
    }
  };

  print(){
    return this.storage.filter(items => items !== undefined);
  };
};

class Inventory {
  constructor(items){
    this.inventory = new HashTable(items);
  }

  addItem({item, amount}){
    let number = this.inventory.hasItem(item) ?      this.inventory.getItems(item) + amount : amount;
    console.log(amount)
    this.inventory.add(item, number);
  }

  removeItem({item, amount}){
    if(this.inventory.hasItem(item)){
      if(this.inventory.getItems(item) - amount >= 0){
        let number = this.inventory.getItems(item) - amount;
        this.inventory.add(item, number);
      } else {
      console.log("not enough " + item + " in stock");
      }
    } else {
    console.log("Item not in stock")
    }
  }

  getInventory(){
    return this.inventory.print();
  }
}

let inventory = new Inventory;

inventory.addItem({
  item: 'egg cartons', 
  amount: 8
});

inventory.addItem({
  item: 'egg cartons',
  amount: 8
});

inventory.addItem({
  item: 'basketballs', 
  amount: 7
});

inventory.addItem({
  item: 'coffee filters', 
  amount: 13
});

inventory.removeItem({
  item: 'coffee filters', 
  amount: 3
});
  
inventory.removeItem({
  amount: 'basketballs', 
  item: 9
});

console.log(inventory.getInventory())





8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

Answer>

class HashTable {
  constructor(items){
    this.hashTableSize = 100;
    this.storage = [];
  };

  hash(key){
    let hash = 0;
    for(let i = 0; i < key.length; i++){
      hash += key.charCodeAt(i);
    }
    return hash % this.hashTableSize;
  };

  add(key, value){
    let index = this.hash(key);
    if(this.storage[index] === undefined){
      this.storage[index] = [[key, value]];
    } else {
      let duplicate = false;
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          this.storage[index][i][1] = value;
          duplicate = true;
        }
      }
      if(duplicate === false){
        this.storage[index].push([key, value]);
      }
    }
  };

  get(key){
    let index = this.hash(key);
    if(this.storage[index] === undefined){
      return false;
    } else{
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          return this.storage[index][i][1];
        }
      }
    }
  };

  remove(key){
    let index = this.hash(key);
    if(this.storage[index].length === 1 && this.storage[index][0][0] === key){
      delete this.storage[index];
    } else {
      for(let i = 0; i < this.storage[index].length; i++){
        if(this.storage[index][i][0] === key){
          delete this.storage[index][i];
        }
      }
    }
  };

  hasItem(key){
    return this.get(key) !== false;
  };

  print(){
    return this.storage.filter(items => items !== undefined);
  };

}

class OnlineNewspaper {
  constructor(){
    this.collection = new HashTable();
  };

  addPaper({publisher, date, paper}){
    if(this.collection.hasItem(publisher) === false){
    this.collection.add(publisher, [[date, paper]]);
    } else {
      this.collection.get(publisher).push([date, paper]);
    }
  };

  findPaper(publisher, date){
    if(this.collection.get(publisher) === undefined){
      console.log('Paper does not exist');
    } else {
      for(let i = 0; i < this.collection.get(publisher).length; i ++){
        if(this.collection.get(publisher)[i][0] === date){
          return this.collection.get(publisher)[i][1];
        } 
      }
    }
  }

};

let collection = new OnlineNewspaper();

collection.addPaper({
  publisher: 'LV Review Journal',
  date: '09-23-1993',
  paper: 'A baby is born'
});

collection.addPaper({
  publisher: 'LV Review Journal',
  date: '09-25-1993',
  paper: 'Heavy Traffic due to major road work'
});

collection.addPaper({
  publisher: 'Boston Globe',
  date: '05-23-1999',
  paper: 'Snow in May'
});

collection.addPaper({
  publisher: 'Boston Globe',
  date: '01-01-2001',
  paper: 'Happy New Year! Let\'s make 2001 AMAZING!!'
});

console.log(collection.findPaper('LV Review Journal', '09-25-1993'));

console.log(collection.findPaper('Boston Globe', 
'01-01-2001'));






