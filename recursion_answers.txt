1. Define and compare recursion and iteration.

A: Recursion and iteration are both methods used to make a function repeat
   itself. Recursion is a procedure in which the function literally calls
   itself again with an adjusted parameter. Iteration achieves repetition
   by using loops.

2. Name five algorithms that are commonly implemented by recursion.

A. Binary Search, Quick Sort, Factorial, Fibonacci Sequence, BFS and DFS.

3. When should you use recursion, and when should you avoid recursion? Give
   examples for each.

A: Recursion is best used for problems that can be broken into treelike
   structures. With a balanced treelike structure, recursion will make things
   faster and cleaner. Problems like binary search trees, merge sort, and
   quick sort are great for recursion. Recursion, however, does carry a risk
   of causing a stack overflow, because it relies on the call stack to store
   data. Loops do not have this probelem, and are also usually faster. Fibonacci
   sequence for example, has a time complexity of 0(2^n) recursively, and 0(n)
   iteratively.

4. Compare the recursive and iterative solutions to the three algorithms from
   the checkpoint (factorial, maximum, and fibonacci). What is similar, and
   what is different?

A: Both solutions contain at least one baseline so that they avoid infinte loops.
   Obviously, the difference is that the recursive solutions call the given function
   again with adjusted arguments, and the iterative solutions use loops and conditions
   to solve a problem.

5. Given a multi-dimensional collection (such as an array) where the number of
   dimensions is unknown, write a recursive algorithm to count the number of
   items in the entire collection.

A: function countElements(array){
  if(array.length){
    return 1 + countElements(array.slice(1))
  } else {
    return 0;
  }
}

countElements([1,2,3,4,5,6]);

6. A palindrome is a word or phrase whose spelling is the same either direction
  (e.g., racecar). Write a recursive algorithm to determine if a given word or
  phrase is a palindrome.

A: function palindrome(str) {
 var re = /[/W_]/g;
 str = str.toLowerCase().replace(re, '');
 var len = str.length;
 for (var i = 0; i < len/2; i++) {
   if (str[i] !== str[len - 1 - i]) {
       return false;
   }
 }
 return true;
}
palindrome('Racecar');

7. Google Easter Egg: Google the term "recursion". Google will prompt you with
   "Did you mean: recursion". Explain why this behavior exhibits properties of
   recursion.

A: Recursion is the repeated application of a recursive procedure, so continually
   hitting the "did you mean recursion?" link, is an example of that. It's almost
   like an infinite loop.
