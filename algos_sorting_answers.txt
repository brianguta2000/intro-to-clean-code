1.
function bubbleSort(array, compare, swap) {
  Slice array to make it a pure function
  Create var for array length
  Do
    Create var to keep track of swapped
    Loop through array up to the array length
      If current value is greater than next value
        create temp var as current value
        Swap the current value and next value
        Set swap variable to true
  While swapped var is equal to true
  return sliced array variable


2. Pseudocode:
A:  FUNCTION quickSort(collection, low, high)
      IF(low < high) THEN
        SET pivot to partition(collection, low, high)
        CALL quickSort(collection, low, pivot - 1)
        CALL quickSort(collection, pivot + 1, high)
      END IF
    END FUNCTION

    FUNCTION partition(collection, low, high)
      SET pivot to collection[low]
      SET leftwall to low
      FOR i = (low + 1) to high
        IF(collection[i] < pivot) THEN
          SET leftwall to leftwall + 1
          CALL swap(collection, i, leftwall)
        END IF
      END FOR
      CALL swap(collection, low, leftwall)
    END FUNCTION

    FUNCTION swap(collection, i, j)
      SET temp to collection[i]
      SET collection[i] to collection[j]
      SET collection[j] to temp
    END FUNCTION



3. Merge sort and quick sort, are more efficient because each iterate through the entire 
collection once and then the remaining iteration are half smaller. Whereas with selection sort, bubble sort, and insertion sort, 
in the worst case the algorithm, after the first iteration, has to iterate through the entire collection almost as much as the entire collection.

4. Bucket sort starts with empty bucket arrays, iterate through the input array and push elements in its bucket, sort each non-empty bucket and then merge buckets 
together into the original array.
Ideal input would be numbers.